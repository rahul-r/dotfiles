# History configuration
HISTFILE=${XDG_CONFIG_HOME}/zsh/zsh_history
HISTSIZE=50000
SAVEHIST=10000
## History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data

bindkey -e

# The following lines were added by compinstall
zstyle :compinstall filename '${XDG_CONFIG_HOME}/zsh/zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

source ~/.aliases

source ${XDG_CONFIG_HOME}/zsh/completion.zsh
source ${XDG_CONFIG_HOME}/zsh/git.zsh

# ls colors
autoload -U colors && colors

# Enable ls colors
export LSCOLORS="Gxfxcxdxbxegedabagacad"

if [[ "$DISABLE_LS_COLORS" != "true" ]]; then
    # Find the option for using colors in ls, depending on the version
    if [[ "$OSTYPE" == netbsd* ]]; then
        # On NetBSD, test if "gls" (GNU ls) is installed (this one supports colors);
        # otherwise, leave ls as is, because NetBSD's ls doesn't support -G
        gls --color -d . &>/dev/null && alias ls='gls --color=tty'
    elif [[ "$OSTYPE" == openbsd* ]]; then
        # On OpenBSD, "gls" (ls from GNU coreutils) and "colorls" (ls from base,
        # with color and multibyte support) are available from ports.  "colorls"
        # will be installed on purpose and can't be pulled in by installing
        # coreutils, so prefer it to "gls".
        gls --color -d . &>/dev/null && alias ls='gls --color=tty'
        colorls -G -d . &>/dev/null && alias ls='colorls -G'
    elif [[ "$OSTYPE" == (darwin|freebsd)* ]]; then
        # this is a good alias, it works by default just using $LSCOLORS
        ls -G . &>/dev/null && alias ls='ls -G'

        # only use coreutils ls if there is a dircolors customization present ($LS_COLORS or .dircolors file)
        # otherwise, gls will use the default color scheme which is ugly af
        [[ -n "$LS_COLORS" || -f "$HOME/.dircolors" ]] && gls --color -d . &>/dev/null && alias ls='gls --color=tty'
    else
        # For GNU ls, we use the default ls color theme. They can later be overwritten by themes.
        if [[ -z "$LS_COLORS" ]]; then
            (( $+commands[dircolors] )) && eval "$(dircolors -b)"
        fi

        ls --color -d . &>/dev/null && alias ls='ls --color=tty' || { ls -G . &>/dev/null && alias ls='ls -G' }

        # Take advantage of $LS_COLORS for completion as well.
        zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
    fi
fi

# enable diff color if possible.
if command diff --color . . &>/dev/null; then
    alias diff='diff --color'
fi

setopt auto_cd
setopt multios
setopt prompt_subst

[[ -n "$WINDOW" ]] && SCREEN_NO="%B$WINDOW%b " || SCREEN_NO=""

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[blue]%}git:(%{$fg[red]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%} "
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%}) %{$fg[yellow]%}✗"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%})"

PROMPT="%(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ )"
PROMPT+=' %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'

# Enable plugins
source ${XDG_CONFIG_HOME}/zsh/syntax-highlighting/zsh-syntax-highlighting.zsh
source ${XDG_CONFIG_HOME}/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

find_files() {
    selected=$(fzf)
 
    if [ -d "$selected" ]
    then
        cd "$selected"
    elif [ -f "$selected" ]
    then
        # Check if the file is a text file
        if file --mime-type "$selected" | grep -q text/
        then
            lvim "$selected"
        else
            # If it's not a text file, open it with the default program
            xdg-open "$selected"
        fi
    fi
}
bindkey -s "^P" 'find_files^M'
